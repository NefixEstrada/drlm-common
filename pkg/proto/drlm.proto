// SPDX-License-Identifier: AGPL-3.0-only

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package drlm;

service DRLM {
    // UserLogin logs in as a local user
    rpc UserLogin(UserLoginRequest) returns (UserLoginResponse) {}

    // UserTokenRenew renews the login token
    rpc UserTokenRenew(UserTokenRenewRequest) returns (UserTokenRenewResponse) {}

    // UserAdd creates a new user
    rpc UserAdd(UserAddRequest) returns (UserAddResponse) {}

    // UserDelete removes an user
    rpc UserDelete(UserDeleteRequest) returns (UserDeleteResponse) {}

    // UserList lists all the users
    rpc UserList(UserListRequest) returns (UserListResponse) {}

    // AgentAdd adds a new Agent to the DB
    rpc AgentAdd(AgentAddRequest) returns (AgentAddResponse) {}

    // AgentInstall installs the agent binary to the agent machine
    rpc AgentInstall(stream AgentInstallRequest) returns (AgentInstallResponse) {}

    // AgentDelete removes the agent from the DB and might do a clenup in the agent machine
    rpc AgentDelete(AgentDeleteRequest) returns (AgentDeleteResponse) {}

    // AgentList returns a list of all the agents
    rpc AgentList(AgentListRequest) returns (AgentListResponse) {}

    // AgentGet returns a specific agent
    rpc AgentGet(AgentGetRequest) returns (AgentGetResponse) {}

    // AgentPluginAdd adds a new plugin to the Agent
    rpc AgentPluginAdd (AgentPluginAddRequest) returns (AgentPluginAddResponse) {}

    // AgentPluginRemove removes a plugin from the Agent
    rpc AgentPluginRemove (AgentPluginRemoveRequest) returns (AgentPluginRemoveResponse) {}

    // AgentPluginUpdate updates a plugin of the Agent
    rpc AgentPluginUpdate (AgentPluginUpdateRequest) returns (AgentPluginUpdateResponse) {}

    // AgentPluginList lists the plugins of the Agent
    rpc AgentPluginList (AgentPluginListRequest) returns (AgentPluginListResponse) {}

    // JobSchedule schedules a new job
    rpc JobSchedule(JobScheduleRequest) returns (JobScheduleResponse) {}

    // JobCancel cancels an scheduled or running Job
    rpc JobCancel(JobCancelRequest) returns (JobCancelResponse) {}

    // JobList returns a list with the the jobs of an agent. If the agent ID is 0, it will return all the jobs
    rpc JobList(JobListRequest) returns (JobListResponse) {}

    // JobNotify notifies a change in a job (this is called from the agent) (status change, stdout...)
    rpc JobNotify(JobNotifyRequest) returns (JobNotifyResponse) {}
}

enum AuthType {
    AUTH_UNKNOWN = 0;
    AUTH_LOCAL = 1;
}

enum Arch {
    ARCH_UNKNOWN = 0;
    ARCH_AMD64 = 1;
}

enum OS {
    OS_UNKNOWN = 0;
    OS_LINUX = 1;
    OS_WINDOWS = 2;
    OS_DARWIN = 3;
    OS_AIX = 4;
    OS_DRAGONFLY = 5;
    OS_FREEBSD = 6;
    OS_NETBSD = 7;
    OS_OPENBSD = 8;
    OS_PLAN9 = 9;
    OS_SOLARIS = 10;
}

enum JobStatus {
    JOB_STATUS_UNKNOWN = 0;
    JOB_STATUS_SCHEDULED = 1;
    JOB_STATUS_RUNNING = 2;
    JOB_STATUS_FINISHED = 3;
    JOB_STATUS_FAILED = 4;
    JOB_STATUS_CANCELLED = 5;
}

message UserLoginRequest {
    string usr = 1;
    string pwd = 2;
}
message UserLoginResponse {
    string tkn = 1;
    google.protobuf.Timestamp tkn_expiration = 2;
}

message UserTokenRenewRequest {}
message UserTokenRenewResponse {
    string tkn = 1;
    google.protobuf.Timestamp tkn_expiration = 2;
}

message UserAddRequest {
    string usr = 1;
    string pwd = 2;
}
message UserAddResponse {}

message UserDeleteRequest {
    string usr = 1;
}
message UserDeleteResponse {}

message UserListRequest {}
message UserListResponse {
    message User {
        string usr = 1;
        AuthType auth_type = 2;
        google.protobuf.Timestamp created_at = 3;
        google.protobuf.Timestamp updated_at = 4;
    }

    repeated User users = 1;
}

message AgentAddRequest {
    string host = 1;
    int32 port = 2;
    string user = 3;
    string password = 4;
    bool is_admin = 5;
}
message AgentAddResponse {}

message AgentInstallRequest {
    string host = 1;
    bytes bin = 2;
}
message AgentInstallResponse {
    enum Code {
        UNKNOWN = 0;
        OK = 1;
        FAILED = 2;
    }

    string message = 1;
    Code code = 2;
}


message AgentDeleteRequest {
    string host = 1;
    bool cleanup = 2;
}
message AgentDeleteResponse{}

message AgentListRequest {}
message AgentListResponse {
    message Agent {
        string host = 1;
        int32 port = 2;
        string user = 3;
        bool sudoer = 4;

        string version = 5;
        Arch arch = 6;
        OS os = 7;
        string os_version = 8;
        string distro = 9;
        string distro_version = 10;

        google.protobuf.Timestamp created_at = 11;
        google.protobuf.Timestamp updated_at = 12;
    }

    repeated Agent agents = 1;
}

message AgentGetRequest {
    string host = 1;
}
message AgentGetResponse {
        string host = 1;
        int32 port = 2;
        string user = 3;
        bool sudoer = 4;

        string version = 5;
        Arch arch = 6;
        OS os = 7;
        string os_version = 8;
        string distro = 9;
        string distro_version = 10;

        google.protobuf.Timestamp created_at = 11;
        google.protobuf.Timestamp updated_at = 12;
}

message AgentPluginAddRequest {
    string host = 1;
    string plugin = 2;
    string version = 3;
}
message AgentPluginAddResponse {}

message AgentPluginRemoveRequest {
    string host = 1;
    string plugin = 2;
}
message AgentPluginRemoveResponse {}

message AgentPluginUpdateRequest {
    string host = 1;
    string plugin = 2;
    string version = 3;
}
message AgentPluginUpdateResponse {}

message AgentPluginListRequest {
    string host = 1;
}
message AgentPluginListResponse {
    repeated string plugins = 1;
}

message JobScheduleRequest {
    string agent_host = 1;
    string name = 2;
}
message JobScheduleResponse {}

message JobCancelRequest {
    uint32 job_id = 1;
}
message JobCancelResponse {}

message JobListRequest {
    string agent_host = 1;
}
message JobListResponse {
    message Job {
        uint32 id = 1;
        string name = 2;
        string agent_host = 3;
        JobStatus status = 4;
        string info = 5;
    }

    repeated Job jobs = 1;
}

message JobNotifyRequest {
    uint32 job_id = 1;
    JobStatus status = 2;
    string info = 3;
}
message JobNotifyResponse {}
