// Code generated by protoc-gen-go. DO NOT EDIT.
// source: drlmcomm.proto

package drlmcomm

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserRequest struct {
	User                 string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Pass                 string   `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRequest) Reset()         { *m = UserRequest{} }
func (m *UserRequest) String() string { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()    {}
func (*UserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc4245dea50b14b, []int{0}
}

func (m *UserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequest.Unmarshal(m, b)
}
func (m *UserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequest.Marshal(b, m, deterministic)
}
func (m *UserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequest.Merge(m, src)
}
func (m *UserRequest) XXX_Size() int {
	return xxx_messageInfo_UserRequest.Size(m)
}
func (m *UserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequest proto.InternalMessageInfo

func (m *UserRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserRequest) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

type AgentRequest struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AgentRequest) Reset()         { *m = AgentRequest{} }
func (m *AgentRequest) String() string { return proto.CompactTextString(m) }
func (*AgentRequest) ProtoMessage()    {}
func (*AgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc4245dea50b14b, []int{1}
}

func (m *AgentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentRequest.Unmarshal(m, b)
}
func (m *AgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentRequest.Marshal(b, m, deterministic)
}
func (m *AgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentRequest.Merge(m, src)
}
func (m *AgentRequest) XXX_Size() int {
	return xxx_messageInfo_AgentRequest.Size(m)
}
func (m *AgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AgentRequest proto.InternalMessageInfo

func (m *AgentRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type SessionReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionReply) Reset()         { *m = SessionReply{} }
func (m *SessionReply) String() string { return proto.CompactTextString(m) }
func (*SessionReply) ProtoMessage()    {}
func (*SessionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc4245dea50b14b, []int{2}
}

func (m *SessionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionReply.Unmarshal(m, b)
}
func (m *SessionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionReply.Marshal(b, m, deterministic)
}
func (m *SessionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionReply.Merge(m, src)
}
func (m *SessionReply) XXX_Size() int {
	return xxx_messageInfo_SessionReply.Size(m)
}
func (m *SessionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionReply.DiscardUnknown(m)
}

var xxx_messageInfo_SessionReply proto.InternalMessageInfo

func (m *SessionReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*UserRequest)(nil), "drlmcomm.UserRequest")
	proto.RegisterType((*AgentRequest)(nil), "drlmcomm.AgentRequest")
	proto.RegisterType((*SessionReply)(nil), "drlmcomm.SessionReply")
}

func init() { proto.RegisterFile("drlmcomm.proto", fileDescriptor_3fc4245dea50b14b) }

var fileDescriptor_3fc4245dea50b14b = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xb1, 0x4a, 0x04, 0x31,
	0x10, 0x86, 0x3d, 0x15, 0x77, 0x77, 0x3c, 0x2c, 0x06, 0x94, 0xc5, 0x4a, 0x52, 0x5d, 0x75, 0x85,
	0x62, 0xa3, 0x67, 0x11, 0xd8, 0xf2, 0xaa, 0x15, 0x1f, 0xe0, 0x34, 0xc3, 0x1a, 0x48, 0x36, 0x31,
	0x93, 0x2b, 0x7c, 0x32, 0x5f, 0x4f, 0xb2, 0xba, 0x9a, 0xea, 0x8a, 0x74, 0xff, 0xfc, 0xcc, 0x47,
	0x3e, 0x86, 0xc0, 0x85, 0x0a, 0xc6, 0xbe, 0x39, 0x6b, 0xd7, 0x3e, 0xb8, 0xe8, 0xb0, 0x9e, 0x67,
	0x71, 0x0f, 0xe7, 0x2f, 0x4c, 0xa1, 0xa7, 0x8f, 0x3d, 0x71, 0x44, 0x84, 0xd3, 0x3d, 0x53, 0x68,
	0x17, 0x37, 0x8b, 0x55, 0xd3, 0x4f, 0x39, 0x75, 0x7e, 0xc7, 0xdc, 0x1e, 0xff, 0x74, 0x29, 0x0b,
	0x01, 0x4b, 0x39, 0xd0, 0x18, 0x33, 0xee, 0xdd, 0x71, 0x9c, 0xb9, 0x94, 0xc5, 0x0a, 0x96, 0xcf,
	0xc4, 0xac, 0xdd, 0xd8, 0x93, 0x37, 0x9f, 0xd8, 0x42, 0x65, 0x89, 0x79, 0x37, 0xd0, 0xef, 0xda,
	0x3c, 0xde, 0x7e, 0x9d, 0x40, 0xd5, 0x05, 0x63, 0xa5, 0xd7, 0xb8, 0x81, 0x66, 0xeb, 0x06, 0x3d,
	0x26, 0x2b, 0xbc, 0x5c, 0xff, 0x89, 0x67, 0x96, 0xd7, 0x57, 0xff, 0x75, 0xfe, 0x82, 0x38, 0xc2,
	0x07, 0xa8, 0xa4, 0x52, 0xc5, 0x6c, 0x47, 0xa6, 0x8c, 0x7d, 0x84, 0x7a, 0xab, 0x39, 0x96, 0xc1,
	0x1b, 0xa8, 0xa5, 0x52, 0xd3, 0x3d, 0x31, 0xdb, 0xca, 0x0f, 0x7c, 0x98, 0xee, 0xc8, 0x94, 0xd2,
	0x4f, 0xd0, 0x24, 0xf1, 0x42, 0xfc, 0xf5, 0x6c, 0xfa, 0x4f, 0x77, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x23, 0x88, 0xe3, 0x09, 0x61, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DrlmApiClient is the client API for DrlmApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DrlmApiClient interface {
	LoginUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*SessionReply, error)
	AddUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*SessionReply, error)
	DelUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*SessionReply, error)
	ListUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*SessionReply, error)
	AddAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*SessionReply, error)
	DelAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*SessionReply, error)
	ListAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*SessionReply, error)
}

type drlmApiClient struct {
	cc *grpc.ClientConn
}

func NewDrlmApiClient(cc *grpc.ClientConn) DrlmApiClient {
	return &drlmApiClient{cc}
}

func (c *drlmApiClient) LoginUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*SessionReply, error) {
	out := new(SessionReply)
	err := c.cc.Invoke(ctx, "/drlmcomm.DrlmApi/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drlmApiClient) AddUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*SessionReply, error) {
	out := new(SessionReply)
	err := c.cc.Invoke(ctx, "/drlmcomm.DrlmApi/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drlmApiClient) DelUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*SessionReply, error) {
	out := new(SessionReply)
	err := c.cc.Invoke(ctx, "/drlmcomm.DrlmApi/DelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drlmApiClient) ListUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*SessionReply, error) {
	out := new(SessionReply)
	err := c.cc.Invoke(ctx, "/drlmcomm.DrlmApi/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drlmApiClient) AddAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*SessionReply, error) {
	out := new(SessionReply)
	err := c.cc.Invoke(ctx, "/drlmcomm.DrlmApi/AddAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drlmApiClient) DelAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*SessionReply, error) {
	out := new(SessionReply)
	err := c.cc.Invoke(ctx, "/drlmcomm.DrlmApi/DelAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drlmApiClient) ListAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*SessionReply, error) {
	out := new(SessionReply)
	err := c.cc.Invoke(ctx, "/drlmcomm.DrlmApi/ListAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrlmApiServer is the server API for DrlmApi service.
type DrlmApiServer interface {
	LoginUser(context.Context, *UserRequest) (*SessionReply, error)
	AddUser(context.Context, *UserRequest) (*SessionReply, error)
	DelUser(context.Context, *UserRequest) (*SessionReply, error)
	ListUser(context.Context, *UserRequest) (*SessionReply, error)
	AddAgent(context.Context, *AgentRequest) (*SessionReply, error)
	DelAgent(context.Context, *AgentRequest) (*SessionReply, error)
	ListAgent(context.Context, *AgentRequest) (*SessionReply, error)
}

func RegisterDrlmApiServer(s *grpc.Server, srv DrlmApiServer) {
	s.RegisterService(&_DrlmApi_serviceDesc, srv)
}

func _DrlmApi_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrlmApiServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drlmcomm.DrlmApi/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrlmApiServer).LoginUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrlmApi_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrlmApiServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drlmcomm.DrlmApi/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrlmApiServer).AddUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrlmApi_DelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrlmApiServer).DelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drlmcomm.DrlmApi/DelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrlmApiServer).DelUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrlmApi_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrlmApiServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drlmcomm.DrlmApi/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrlmApiServer).ListUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrlmApi_AddAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrlmApiServer).AddAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drlmcomm.DrlmApi/AddAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrlmApiServer).AddAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrlmApi_DelAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrlmApiServer).DelAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drlmcomm.DrlmApi/DelAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrlmApiServer).DelAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrlmApi_ListAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrlmApiServer).ListAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drlmcomm.DrlmApi/ListAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrlmApiServer).ListAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DrlmApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drlmcomm.DrlmApi",
	HandlerType: (*DrlmApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginUser",
			Handler:    _DrlmApi_LoginUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _DrlmApi_AddUser_Handler,
		},
		{
			MethodName: "DelUser",
			Handler:    _DrlmApi_DelUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _DrlmApi_ListUser_Handler,
		},
		{
			MethodName: "AddAgent",
			Handler:    _DrlmApi_AddAgent_Handler,
		},
		{
			MethodName: "DelAgent",
			Handler:    _DrlmApi_DelAgent_Handler,
		},
		{
			MethodName: "ListAgent",
			Handler:    _DrlmApi_ListAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drlmcomm.proto",
}
